<div class="px-5" data-view-name="oce-solve-exam" id="oceApp">
    <div v-if="examFinished">
        <div class="text-center mb-3">
            <h1 class="mt-1">Wynik: $[examScores.percent]%</h1>
            <h3 class="mt-5">Punkty: $[examScores.points]/$[questions.length]</h3>
            <h5 class="text-muted">Użytkownik: $[username]</h5>
        </div>
    </div>
    <div>
        <div>
            <div class="d-flex justify-content-between align-items-center">
                <button class="btn btn-primary" style="width: 100px;" @click="prevQuestion"
                    :class="{'disabled': onFirstQuestion}">
                    <span>Cofnij</span>
                </button>
                <div class="text-center">
                    <h1 class="my-1 mx-2">Quiz</h1>
                    <span class="text-break">$[examName]</span>
                </div>
                <button v-if="!onLastQuestion || examFinished" class="btn btn-primary" style="width: 100px;"
                    @click="nextQuestion" :class="{'disabled': onLastQuestion}">
                    <span>Dalej</span>
                </button>
                <button v-if="onLastQuestion && !examFinished" class="btn btn-danger" style="width: 100px;"
                    @click="sendCompletedAnswers()">
                    <span>Zakończ</span>
                </button>
            </div>
            <div class="d-flex justify-content-between align-items-center px-3 mt-2" v-if="!loadingExam">
                <h4>Pytanie $[selectedQuestionIndex + 1] z $[questions.length]</h4>
                <h5 class="text-muted">$[getTime()]</h5>
            </div>
            <div class="mt-4" style="min-height: 50px;">
                <strong>$[activeQuestion.text]</strong>
            </div>
        </div>
        <div class="p-4 text-center" v-if="loadingExam">
            <div class="fa-4x">
                <i class="fa fa-spinner fa-pulse"></i>
            </div>
        </div>
        <div class="solve-exam-answers mt-4 p-1"
            :class="{'bg-danger rounded': examFinished && !isQuestionCorrect(activeQuestion), 'bg-success rounded': examFinished && isQuestionCorrect(activeQuestion)}">
            <ul class="list-group">
                <li class="list-group-item pl-2" :class="{'bg-success': isCorrect(answer)}"
                    v-for="answer in activeQuestion.answers" :key="`ANS-${answer.id}`">
                    <div class="d-flex">
                        <div class="align-self-center ml-1">
                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" :id="`answer-${answer.id}-chkbx`"
                                    v-model="selectedAnswersIds" :value="answer.id" @change="saveAnswers"
                                    :disabled="examFinished">
                                <label class="custom-control-label" :for="`answer-${answer.id}-chkbx`"></label>
                            </div>
                        </div>
                        <div class="ml-1 pl-2 border-left">
                            <span>$[answer.text]</span>
                        </div>
                    </div>
                </li>
            </ul>
        </div>
        <div class="solve-exam-footer mt-4 bg-white">
            <div class="text-center">
                <button v-for="i in questions.length" class="btn btn-question-index"
                    :class="{'btn-primary': isSelected(i), 'btn-outline-primary': !isSelected(i)}"
                    @click="selectQuestion(i-1)">
                    <span>$[i]</span>
                </button>
            </div>
        </div>
    </div>
</div>
<script>
    const vm = new Vue({
        el: '#oceApp',
        mounted() {
            this.fetchData();
        },
        created() {
            setInterval(() => {
                this.dateNow = new Date();
            }, 1000);
        },
        data: {
            dateNow: new Date(),
            startDate: new Date(),
            examName: '',
            loadingExam: true,
            selectedQuestionIndex: 0,
            selectedAnswersIds: [],
            examTimeLimit: 0,
            correctQuestions: [],
            correctAnswers: [],
            timeleft: 0,
            questions: [],
            examScores: { points: 0, percent: 0 },
            examFinished: false,
            username: '',
            finishedTime: undefined,
            sendRequestReady: true
        },
        methods: {
            prevQuestion: function () {
                this.selectedQuestionIndex -= this.selectedQuestionIndex > 0 ? 1 : 0;
            },
            nextQuestion: function () {
                this.selectedQuestionIndex += this.selectedQuestionIndex < this.questions.length - 1 ? 1 : 0;
            },
            selectQuestion: function (index) {
                if (index >= 0 && index < this.questions.length) {
                    this.selectedQuestionIndex = index;
                }
            },
            isSelected: function (index) {
                return this.selectedQuestionIndex + 1 === index;
            },
            isCorrect: function (answer) {
                return this.correctAnswers.includes(answer.id);
            },
            isIncorrectSelected: function (answer) {
                return this.examFinished && this.selectedAnswersIds.includes(answer.id) && !this.isCorrect(answer);
            },
            isQuestionCorrect: function (question) {
                return this.correctQuestions.includes(question.id);
            },
            getTime: function (format = true) {
                let time = 0;
                if (this.examFinished) {
                    time = this.finishedTime?.getTime() - this.startDate.getTime();
                } else {
                    time = this.dateNow.getTime() - this.startDate.getTime();
                    if (this.examTimeLimit > 0) {
                        time = this.examTimeLimit - time;
                    }
                }
                if (time < 0) {
                    time = 0;
                    this.fetchData();
                }

                const seconds = (Math.floor(time / 1000) % 60).toString().padStart(2, '0');
                const minutes = (Math.floor(time / 60000) % 60).toString().padStart(2, '0');
                return format ? `${minutes}:${seconds}` : time;
            },
            fetchData: function () {
                sendAsyncRequest(window.location.pathname + '/data', { startDate: this.startDate }, 'POST').then(res => {
                    console.log(res);
                    this.examScores.points = res.points;
                    this.examScores.percent = (res.percent * 100).toFixed(2);
                    this.examFinished = !!res.completed;
                    this.examTimeLimit = res.examTimeLimit;
                    Vue.set(this, 'username', res.username);
                    Vue.set(this, 'correctQuestions', res.correctQuestions);
                    Vue.set(this, 'correctAnswers', res.correctAnswers);
                    this.finishedTime = new Date(res.finishedTime);
                    this.questions.splice(0, this.questions.length);
                    this.loadingExam = false;
                    this.examName = res.examName;
                    this.startDate = new Date(res.startTime);
                    duration = res.duration * 1000;
                    if (res.questionsAnswersList) {
                        res.questionsAnswersList?.forEach(x => this.questions.push(x));
                    }
                    if (res.selectedAnswersList) {
                        this.selectedAnswersIds.push(...res.selectedAnswersList);
                    }
                });
            },
            saveAnswers: function () {
                this.sendRequestReady = false;
                sendAsyncRequest(window.location.pathname + '/saveAnswers', { answers: this.selectedAnswersIds, isCompleted: false }, 'POST').then(res => {
                    this.sendRequestReady = true;
                });
            },
            sendCompletedAnswers: function () {
                if (confirm("Czy na pewno chcesz zatwierdzić pytanie? Po zatwierdzeniu nie będzie można edytować odpowiedzi.")) {
                    sendAsyncRequest(window.location.pathname + '/saveAnswers', { answers: this.selectedAnswersIds, isCompleted: true }, 'POST').then(res => {
                        this.fetchData();
                        this.selectQuestion(0);
                    });
                }
            }
        },
        computed: {
            activeQuestion: function () {
                if (this.questions.length === 0) {
                    return {};
                }
                return this.questions[this.selectedQuestionIndex];
            },
            onFirstQuestion: function () {
                return this.selectedQuestionIndex === 0;
            },
            onLastQuestion: function () {
                return this.questions.length > 0 && this.selectedQuestionIndex === this.questions.length - 1;
            }
        }
    });
</script>